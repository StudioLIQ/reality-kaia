#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$ROOT_DIR"

# .env 로드
if [[ -f .env ]]; then set -a; source .env; set +a; fi

NETWORK="${1:-testnet}"   # 사용법: ./scripts/deploy.sh [testnet|mainnet]

: "${PRIVATE_KEY:?Missing PRIVATE_KEY in env}"

# Default RPC endpoints if not provided
KAIA_TESTNET_RPC="${KAIA_TESTNET_RPC:-https://public-en-kairos.node.kaia.io}"
KAIA_MAINNET_RPC="${KAIA_MAINNET_RPC:-https://public-en.node.kaia.io}"

# 기본값 (없으면 .env에 넣은 값 사용)
FEE_RECIPIENT="${FEE_RECIPIENT:-0x7abEdc832254DaA2032505e33A8Dd325841D6f2D}"
FEE_BPS="${FEE_BPS:-25}"

# 체인 스위치
if [[ "$NETWORK" == "mainnet" ]]; then
  CHAIN_ID=8217
  RPC="$KAIA_MAINNET_RPC"
  USDT_MAINNET="${USDT_MAINNET:-0xd077a400968890eacc75cdc901f0356c943e4fdb}"
  WKAIA="${WKAIA_MAINNET:-0x19Aac5f612f524B754CA7e7c41cbFa2E981A4432}"
  NET_LABEL="Kaia Mainnet (8217)"
else
  CHAIN_ID=1001
  RPC="$KAIA_TESTNET_RPC"
  WKAIA="${WKAIA_TESTNET:-0x043c471bEe060e00A56CcD02c0Ca286808a5A436}"
  NET_LABEL="Kaia Kairos Testnet (1001)"
fi

echo "[deploy] $NET_LABEL"
echo "[deploy] RPC=$RPC"
echo "[deploy] feeRecipient=$FEE_RECIPIENT feeBps=$FEE_BPS"

# jq 필수
command -v jq >/dev/null || { echo "Please install jq"; exit 1; }

# Move to protocol directory for forge
cd packages/protocol

# Run forge script and capture output
OUTPUT=$(forge script script/DeployAll.s.sol:DeployAll \
  --rpc-url "$RPC" \
  --private-key "$PRIVATE_KEY" \
  --broadcast -vvvv 2>&1)

echo "$OUTPUT"

# Parse deployment addresses from output, removing ANSI escape codes completely
# Use perl for more reliable ANSI escape code removal
REALITIO=$(echo "$OUTPUT" | grep "REALITIO:" | perl -pe 's/\e\[[0-9;]*m//g' | tr -d '\r\n' | awk '{print $NF}' | grep -o '0x[a-fA-F0-9]*')
ARBITRATOR=$(echo "$OUTPUT" | grep "ARBITRATOR:" | perl -pe 's/\e\[[0-9;]*m//g' | tr -d '\r\n' | awk '{print $NF}' | grep -o '0x[a-fA-F0-9]*')
ZAPPER=$(echo "$OUTPUT" | grep "ZAPPER:" | perl -pe 's/\e\[[0-9;]*m//g' | tr -d '\r\n' | awk '{print $NF}' | grep -o '0x[a-fA-F0-9]*')
PERMIT2=$(echo "$OUTPUT" | grep "PERMIT2:" | perl -pe 's/\e\[[0-9;]*m//g' | tr -d '\r\n' | awk '{print $NF}' | grep -o '0x[a-fA-F0-9]*')
MOCK_USDT=$(echo "$OUTPUT" | grep "MOCK_USDT:" | perl -pe 's/\e\[[0-9;]*m//g' | tr -d '\r\n' | awk '{print $NF}' | grep -o '0x[a-fA-F0-9]*')

# Return to root directory
cd ../..

# Create deployment JSON
mkdir -p deployments

if [[ "$CHAIN_ID" == "1001" ]]; then
  # Testnet with MockUSDT
  cat > "deployments/${CHAIN_ID}.json" <<EOF
{
  "RealitioERC20": "$REALITIO",
  "arbitratorSimple": "$ARBITRATOR",
  "zapperWKAIA": "$ZAPPER",
  "MockUSDT": "$MOCK_USDT",
  "USDT": "$MOCK_USDT",
  "WKAIA": "$WKAIA",
  "PERMIT2": "$PERMIT2",
  "feeRecipient": "$FEE_RECIPIENT",
  "feeBps": $FEE_BPS
}
EOF
else
  # Mainnet with real USDT
  cat > "deployments/${CHAIN_ID}.json" <<EOF
{
  "RealitioERC20": "$REALITIO",
  "arbitratorSimple": "$ARBITRATOR",
  "zapperWKAIA": "$ZAPPER",
  "USDT": "$USDT_MAINNET",
  "WKAIA": "$WKAIA",
  "PERMIT2": "$PERMIT2",
  "feeRecipient": "$FEE_RECIPIENT",
  "feeBps": $FEE_BPS
}
EOF
fi

DEPLOY_JSON="deployments/${CHAIN_ID}.json"
[[ -f "$DEPLOY_JSON" ]] || { echo "[deploy] ERROR: $DEPLOY_JSON not found"; exit 1; }

# Copy deployment JSON to web/public  
WEB_DEPLOY_DIR="packages/web/public/deployments"
mkdir -p "$WEB_DEPLOY_DIR"
cp "$DEPLOY_JSON" "$WEB_DEPLOY_DIR/${CHAIN_ID}.json"
echo "[deploy] Copied to $WEB_DEPLOY_DIR/${CHAIN_ID}.json"

mkdir -p packages/web/lib
cat > packages/web/lib/deployments.generated.ts <<'TS'
// AUTO-GENERATED by scripts/deploy.sh
export const deploymentsByChain: Record<string, any> = {};
try { deploymentsByChain["1001"] = require("../public/deployments/1001.json"); } catch {}
try { deploymentsByChain["8217"] = require("../public/deployments/8217.json"); } catch {}
export function getDeployments(chainId: number) { return deploymentsByChain[String(chainId)]; }
TS

echo "[deploy] synced FE: packages/web/public/deployments/${CHAIN_ID}.json"
echo "[deploy] generated packages/web/lib/deployments.generated.ts"
echo "[deploy] done."